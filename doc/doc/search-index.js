var searchIndex = JSON.parse('{\
"climcalc_core":{"doc":"","t":[3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11],"n":["Calculator","borrow","borrow_mut","calculate_over_years","delete_measure","describe","end_year","from","from_abi","get_input","get_results","into","into_abi","is_none","list_input_ids","list_measure_ids","list_result_ids","new","new_measure","none","ref_from_abi","ref_mut_from_abi","return_abi","set_input","start_year","try_from","try_into","type_id","update_measure"],"q":["climcalc_core","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","This function serves to trigger the calculation process.","Deleting a measure. Note that this updates the values of …","","","Returns the argument unchanged.","","This function returns the start year value of an input …","Get a list of values (for each year) in a result.","Calls <code>U::from(self)</code>.","","","Returns the ids of all input parameters.","List all measure ids that are present in the current …","Returns the ids of all results.","A calculator is initialized by defining the year range. …","Add a new measure to a input (given by an input id). start …","","","","","This function serves to populate the input parameters.","","","","","For changing the start_year, end_year or delta of a given …"],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[1],[[1,2,2]],[[]],0,[[]],[3,1],[[1,2],[[5,[4]]]],[[1,2],[[6,[4]]]],[[]],[1,3],[[],7],[1,8],[1,8],[1,8],[[3,3],1],[[1,2,2,3,3,4]],[[]],[[]],[[]],[[]],[[1,2,4]],0,[[],9],[[],9],[[],10],[[1,2,2,3,3,4]]],"p":[[3,"Calculator"],[15,"str"],[15,"u32"],[15,"f32"],[4,"Option"],[3,"Vec"],[15,"bool"],[3,"JsValue"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
